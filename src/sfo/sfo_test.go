package sfo

import (
	"bytes"
	"testing"
)

var SFO = []byte{0, 80, 83, 70, 1, 1, 0, 0, 212, 0, 0, 0, 80, 1, 0, 0, 12, 0, 0, 0, 0, 0, 4, 2, 6, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 18, 0, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 27, 0, 4, 2, 3, 0, 0, 0, 4, 0, 0, 0, 16, 0, 0, 0, 36, 0, 4, 2, 145, 1, 0, 0, 0, 2, 0, 0, 20, 0, 0, 0, 44, 0, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 20, 2, 0, 0, 59, 0, 4, 2, 8, 0, 0, 0, 8, 0, 0, 0, 24, 2, 0, 0, 74, 0, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 32, 2, 0, 0, 85, 0, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 36, 2, 0, 0, 98, 0, 4, 2, 17, 0, 0, 0, 128, 0, 0, 0, 40, 2, 0, 0, 104, 0, 4, 2, 10, 0, 0, 0, 16, 0, 0, 0, 168, 2, 0, 0, 113, 0, 4, 2, 6, 0, 0, 0, 8, 0, 0, 0, 184, 2, 0, 0, 65, 80, 80, 95, 86, 69, 82, 0, 65, 84, 84, 82, 73, 66, 85, 84, 69, 0, 66, 79, 79, 84, 65, 66, 76, 69, 0, 67, 65, 84, 69, 71, 79, 82, 89, 0, 76, 73, 67, 69, 78, 83, 69, 0, 80, 65, 82, 69, 78, 84, 65, 76, 95, 76, 69, 86, 69, 76, 0, 80, 83, 51, 95, 83, 89, 83, 84, 69, 77, 95, 86, 69, 82, 0, 82, 69, 83, 79, 76, 85, 84, 73, 79, 78, 0, 83, 79, 85, 78, 68, 95, 70, 79, 82, 77, 65, 84, 0, 84, 73, 84, 76, 69, 0, 84, 73, 84, 76, 69, 95, 73, 68, 0, 86, 69, 82, 83, 73, 79, 78, 0, 0, 0, 0, 48, 49, 46, 48, 48, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 68, 71, 0, 0, 76, 105, 98, 114, 97, 114, 121, 32, 112, 114, 111, 103, 114, 97, 109, 115, 32, 194, 169, 83, 111, 110, 121, 32, 67, 111, 109, 112, 117, 116, 101, 114, 32, 69, 110, 116, 101, 114, 116, 97, 105, 110, 109, 101, 110, 116, 32, 73, 110, 99, 46, 32, 76, 105, 99, 101, 110, 115, 101, 100, 32, 102, 111, 114, 32, 112, 108, 97, 121, 32, 111, 110, 32, 116, 104, 101, 32, 80, 76, 65, 89, 83, 84, 65, 84, 73, 79, 78, 194, 174, 51, 32, 67, 111, 109, 112, 117, 116, 101, 114, 32, 69, 110, 116, 101, 114, 116, 97, 105, 110, 109, 101, 110, 116, 32, 83, 121, 115, 116, 101, 109, 32, 111, 114, 32, 97, 117, 116, 104, 111, 114, 105, 122, 101, 100, 32, 80, 76, 65, 89, 83, 84, 65, 84, 73, 79, 78, 194, 174, 51, 32, 102, 111, 114, 109, 97, 116, 32, 115, 121, 115, 116, 101, 109, 115, 46, 32, 70, 111, 114, 32, 102, 117, 108, 108, 32, 116, 101, 114, 109, 115, 32, 97, 110, 100, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 32, 115, 101, 101, 32, 116, 104, 101, 32, 117, 115, 101, 114, 39, 115, 32, 109, 97, 110, 117, 97, 108, 46, 32, 84, 104, 105, 115, 32, 112, 114, 111, 100, 117, 99, 116, 32, 105, 115, 32, 97, 117, 116, 104, 111, 114, 105, 122, 101, 100, 32, 97, 110, 100, 32, 112, 114, 111, 100, 117, 99, 101, 100, 32, 117, 110, 100, 101, 114, 32, 108, 105, 99, 101, 110, 115, 101, 32, 102, 114, 111, 109, 32, 83, 111, 110, 121, 32, 67, 111, 109, 112, 117, 116, 101, 114, 32, 69, 110, 116, 101, 114, 116, 97, 105, 110, 109, 101, 110, 116, 32, 73, 110, 99, 46, 32, 85, 115, 101, 32, 105, 115, 32, 115, 117, 98, 106, 101, 99, 116, 32, 116, 111, 32, 116, 104, 101, 32, 99, 111, 112, 121, 114, 105, 103, 104, 116, 32, 108, 97, 119, 115, 32, 97, 110, 100, 32, 116, 104, 101, 32, 116, 101, 114, 109, 115, 32, 97, 110, 100, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 115, 32, 111, 102, 32, 116, 104, 101, 32, 117, 115, 101, 114, 39, 115, 32, 108, 105, 99, 101, 110, 115, 101, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 48, 50, 46, 52, 50, 48, 48, 0, 55, 0, 0, 0, 23, 3, 0, 0, 77, 105, 114, 114, 111, 114, 39, 115, 32, 69, 100, 103, 101, 226, 132, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 76, 69, 83, 48, 48, 51, 50, 50, 0, 0, 0, 0, 0, 0, 0, 48, 49, 46, 48, 48, 0, 0, 0}

func TestParseSfo(t *testing.T) {
	sfo, err := ParseSfo(bytes.NewReader(SFO))

	if err != nil {
		t.Error(err)
		return
	}

	var (
		magic   = string(sfo.Header.Magic[:])
		version = sfo.Header.Version
		entries = sfo.Header.Tables_entries
	)

	if magic != "\x00PSF" {
		t.Error("Invalid magic", sfo.Header.Magic)
	}
	if version != [4]byte{1, 1, 0, 0} {
		t.Error("Invalid version", version)
	}
	if entries != uint32(12) {
		t.Error("Invalid entries count", entries)
	}

	if sfo.Entries[0].Key != "APP_VER" {
		t.Error("Invalid entry 0 key", sfo.Entries[0].Key)
	}

	t.Log(string(sfo.Entries[0].Data))
	t.Error()
}
